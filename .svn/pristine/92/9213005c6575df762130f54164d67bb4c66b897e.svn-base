#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "helpme.h"



int main(int argc, char **argv)
{
 	int c;
 	int i,j;
	char filename[MAX];
	char name[MAX];
	city_t **head;
	node_t **curr;
	graph_t *graph;

	if(argc != 2)
	{
		printf("Usage: helpme [insert file]\n");
		exit(EXIT_FAILURE);
	}

	strcpy(filename,argv[1]);
	printf("FILENAME : %s\n",filename);
	head = parsingData(filename,&c);
	/*printgraph(head,c,c);*/
	head = citylink(head,c);
	curr = unwrapper(head,c);
	graph = creategraph(curr,c);
	/*printf("%d\n",graph->city[0]->next[0]->traveltime);*/
	/*head = dijkstra(head,name,c);*/


	return 0;
}


city_t** parsingData(char *filename, int *a)
{
	char *str;
	FILE *fp;
	int x = 0;
	int i = 3;
	int c = 0;
	int y ,p;
	int flag = 1;
	int val;
	int cityid;
	int num;
	int count;
	char string[MAX];
	city_t **city;



	fp = fopen(filename,"r");

	if(fp == NULL)
	{
		printf("ERROR opening file\n");
		exit(EXIT_FAILURE);
	}
	
	while(fscanf(fp,"%s",string) == 1)
	{
		x++;
		/*printf("String %d is << %s >>\n",x,string);*/

		if(flag)
		{
			val = atoi(string);
			*a = val;
			city_t **cityarr = (city_t**)malloc(sizeof(city_t*)*val);
			city = cityarr;
			for(y=0;y<val;y++)
			{
				city[y]=(city_t*)malloc(sizeof(city_t));
				node_t *info = (node_t*)malloc(sizeof(node_t));
				city[y]->cityinfo = info;
				int *travelarr = (int*)malloc(sizeof(int)*val);
				city[y]->travel = travelarr;
				for(p=0;p<val;p++)
				{
					city[y]->travel[p] = -1;
				}
			}
			flag = 0;
		}else
		{

			str = strtok(string,"|");
			cityid = atoi(str);
			city[c]->cityinfo->ID = cityid;

			str = strtok(NULL,"|");
			strcpy(city[c]->cityinfo->cityname,str);
			
			str = strtok(NULL,"|");
			strcpy(city[c]->cityinfo->relief,str);
			
			str = strtok(NULL,":");
					
			if(str != NULL)
			{
				num = atoi(str);
			}
		
			while(str != NULL)
			{
				str = strtok(NULL,",");
				count = atoi(str);
				city[c]->travel[num] = count;
				str = strtok(NULL,":");
				if(str != NULL)
				{
					num = atoi(str);
				}
			}
			c++;
		}
	}
	return city;
}


void printgraph(city_t **city, int c, int b)
{
	int i;
	int j;

	printf("\nPrinting started\n");
	printf("------------------------\n");
	for(i=0;i<b;i++)
	{
		for(j=0;j<c;j++)
		{
			printf("city[%d}->travel[%d] = %d\n",i,j,city[i]->travel[j]);
		}
		printf("------------------------\n");
	}
	printf("\nPrinting Complete\n");
}


city_t** citylink(city_t** city, int c)
{
	int i,j,k,l;
	link_t **link;
	int x = 0;


	for(i=0;i<c;i++)
	{
		city[i]->cityinfo->next = (link_t**)malloc(sizeof(link_t*)*c);
		link = city[i]->cityinfo->next;
		for(l=0;l<c;l++)
		{
			link[l]=(link_t*)malloc(sizeof(link_t));
			link[l]->traveltime = 0;
		}

		for(j=0;j<c;j++)
		{
			if(city[i]->travel[j] > 0)
			{
				for(k=0;k<c;k++)
				{
					if(city[k]->cityinfo->ID == j)
					{
						link[x]->citytown = (node_t*)city[k]->cityinfo;
						link[x]->traveltime = city[i]->travel[j];
						x++;
					}
				}
			}
		}
		x = 0;
	}
	return city;
}


node_t** unwrapper(city_t** city, int c)
{
	node_t ** head;
	int i;

	head = (node_t**)malloc(sizeof(node_t*)*c);
	for(i=0;i<c;i++)
	{
		head[i] = city[i]->cityinfo;
		printf("head[%d]->ID = %d\n",i,head[i]->ID);
		free(city[i]);
	}
	return head;
}


graph_t* creategraph(node_t** newcity, int c)
{
	int i;
	graph_t *graph;
	printf("%d\n",newcity[0]->ID);

	
	for(i=0;i<c;i++)
	{
		printf("newcitybefore[%d] = %d\n",i,newcity[i]->ID);
		graph->city[i] = newcity[i];
		printf("graph->city[%d] = %d\n",i,graph->city[i]->ID);
		printf("newcityafter[%d] = %d\n",i,newcity[i]->ID);
		printf("\n");
	}
	return graph;
}


city_t** dijkstra(city_t** city, char *name, int c)
{
	int i;
	int src;
	char res[MAX];

	printf("Enter City name : ");
	scanf("%s",name);
	printf("City entered = %s\n",name);

	for(i=0;i<c;i++)
	{
		if(strcmp(city[i]->cityinfo->cityname,name) == 0)
		{
			printf("\nDisaster Location :\nCity ID = %d\nCityname = %s\n",city[i]->cityinfo->ID,city[i]->cityinfo->cityname);
			src = city[i]->cityinfo->ID;
		}
	}

	printf("What resources do you need?\n");
	scanf("%s",res);
	
	





	return city;

}


