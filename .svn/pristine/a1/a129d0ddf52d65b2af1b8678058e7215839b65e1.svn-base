#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "helpme.h"



int main(int argc, char **argv)
{
 	int c;
 	int i,j;
	char filename[MAX];
	city_t **head;


	if(argc != 2)
	{
		printf("Usage: helpme [insert file]\n");
		exit(EXIT_FAILURE);
	}

	strcpy(filename,argv[1]);
	printf("FILENAME : %s\n",filename);
	head = parsingData(filename,&c);
	printgraph(head,c,c);
	head = citylink(head,c);



	return 0;
}


city_t** parsingData(char *filename, int *a)
{
	char *str;
	FILE *fp;
	int x = 0;
	int i = 3;
	int c = 0;
	int y ,p;
	int flag = 1;
	int val;
	int cityid;
	int num;
	int count;
	char string[MAX];
	city_t **city;



	fp = fopen(filename,"r");

	if(fp == NULL)
	{
		printf("ERROR opening file\n");
		exit(EXIT_FAILURE);
	}
	
	while(fscanf(fp,"%s",string) == 1)
	{
		x++;
		printf("String %d is << %s >>\n",x,string);

		if(flag)
		{
			val = atoi(string);
			*a = val;
			printf("val = %d\n",val);
			city_t **cityarr = (city_t**)malloc(sizeof(city_t*)*val);
			city = cityarr;
			for(y=0;y<val;y++)
			{
				city[y]=(city_t*)malloc(sizeof(city_t));
				node_t *info = (node_t*)malloc(sizeof(node_t));
				city[y]->cityinfo = info;
				int *travelarr = (int*)malloc(sizeof(int)*val);
				city[y]->travel = travelarr;
				for(p=0;p<val;p++)
				{
					city[y]->travel[p] = -1;
				}
			}
			flag = 0;
		}else
		{

			str = strtok(string,"|");
			cityid = atoi(str);
			city[c]->cityinfo->ID = cityid;
			printf("city[%d]->cityinfo.ID = %d\n",c,city[c]->cityinfo->ID);


			str = strtok(NULL,"|");
			strcpy(city[c]->cityinfo->cityname,str);
			printf("city[%d]->cityinfo.cityname = %s\n",c,city[c]->cityinfo->cityname);

			str = strtok(NULL,"|");
			strcpy(city[c]->cityinfo->relief,str);
			printf("city[%d]->cityinfo.relief = %s\n",c,city[c]->cityinfo->relief);

			str = strtok(NULL,":");
					
			if(str != NULL)
			{
				num = atoi(str);
			}
		
			while(str != NULL)
			{
				str = strtok(NULL,",");
				count = atoi(str);
				city[c]->travel[num] = count;
				printf("city[%d]->travel[%d] = %d\n",c,num,city[c]->travel[num]);
				str = strtok(NULL,":");
				if(str != NULL)
				{
					num = atoi(str);
				}
			}
			c++;
		}
	}
	return city;
}


void printgraph(city_t **city, int c, int b)
{
	int i;
	int j;

	printf("\nPrinting started\n");
	printf("------------------------\n");
	for(i=0;i<b;i++)
	{
		for(j=0;j<c;j++)
		{
			printf("city[%d}->travel[%d] = %d\n",i,j,city[i]->travel[j]);
		}
		printf("------------------------\n");
	}
	printf("\nPrinting Complete\n");
}


city_t** citylink(city_t** city, int c)
{
	int i,j,k,l;
	link_t **link;
	int x = 0;


	for(i=0;i<c;i++)
	{
		city[i]->cityinfo->next = (link_t**)malloc(sizeof(link_t*)*c);
		link = city[i]->cityinfo->next;
		for(l=0;l<c;l++)
		{
			link[l]=(link_t*)malloc(sizeof(link_t));
		}

		for(j=0;j<c;j++)
		{
			if(city[i]->travel[j] > 0)
			{
				for(k=0;k<c;k++)
				{
					if(city[k]->cityinfo->ID == j)
					{
						link[x]->citytown = (node_t*)city[k]->cityinfo;
						link[x]->traveltime = city[i]->travel[j];
						printf("link[%d]->traveltime = %d\n",x,city[i]->travel[j]);
						printf("link[%d]->citytown->cityname = %s\n",x,city[k]->cityinfo->cityname);
						x++;
					}
				}
			}
		}
		x = 0;
	}
	return city;
}


/*
city_t** dijkstra(city_t** city)
{








}
*/






